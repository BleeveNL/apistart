import * as joi from 'joi'

export default joi.object({
  enabled: joi.boolean().required(),
  dbName: joi.string().optional(),
  name: joi.string().optional(),
  clientUrl: joi.string().optional(),
  host: joi.string().optional(),
  port: joi.number().integer().optional(),
  user: joi.string().optional(),
  password: joi.string().optional(),
  charset: joi.string().optional(),
  collate: joi.string().optional(),
  multipleStatements: joi.boolean().optional(),
  pool: joi
    .object({
      name: joi.string().optional(),
      afterCreate: joi.function().optional(),
      min: joi.number().integer().optional(),
      max: joi.number().integer().optional(),
      refreshIdle: joi.boolean().optional(),
      idleTimeoutMillis: joi.number().integer().optional(),
      reapIntervalMillis: joi.number().integer().optional(),
      returnToHead: joi.boolean().optional(),
      priorityRange: joi.number().integer().optional(),
      log: joi.function().optional().arity(2),
      maxWaitingClients: joi.number().integer().optional(),
      testOnBorrow: joi.boolean().optional(),
      acquireTimeoutMillis: joi.number().integer().optional(),
      fifo: joi.boolean().optional(),
      autostart: joi.boolean().optional(),
      evictionRunIntervalMillis: joi.number().integer().optional(),
      numTestsPerRun: joi.number().integer().optional(),
      softIdleTimeoutMillis: joi.number().integer().optional(),
      Promise: joi.any().optional(),
    })
    .optional(),
  models: joi.object().required(),
  subscribers: joi.array().items(joi.object()).optional(),
  type: joi.allow('mongo', 'mysql', 'mariadb', 'postgresql', 'sqlite').required(),
  forceUtcTimezone: joi.boolean().optional(),
  forceUndefined: joi.boolean().optional(),
  timezone: joi.string().optional(),
  strict: joi.boolean().optional(),
  validate: joi.boolean().optional(),
  vloggeralidate: joi.function().optional().arity(1),
  replicas: joi.array().items(joi.object()).optional(),
  useBatchInserts: joi.boolean().optional(),
  useBatchUpdates: joi.boolean().optional(),
  batchSize: joi.number().integer().optional(),
  folder: joi
    .object({
      migrations: joi.string().required(),
      seeds: joi.string().required(),
    })
    .required(),
})
